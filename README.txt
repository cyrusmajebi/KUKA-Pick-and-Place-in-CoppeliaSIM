The main.py file contains the main loop and functions in this software

In main.py, we import the following functions:

1. TrajectoryGenerator from trajectory.py 
   This function generates the reference trajectory and stores it 
   in a file called trajectory.csv.

2. NextStep from odometry.py
   This function takes the  wheel and arm controls as well as the
   current configuration and returns the new configuration.

3. FeedbackControl and WheelArmSpeeds from control.py 
   The FeedbackControl function takes in X, X_d, X_d_next, K_i, K_p
   and returns the commanded end-effector twist expressed in end-effector 
   frame. 
   
   The WheelArmSpeeds function takes in V, thetalist and returns the
   wheel and arm controls.

4. positive_definite_diagonal_ki_matrix, positive_definite_diagonal_kp_matrix from
   random_matrix.py
   These two functions return positive definite diagonal gain matrices which are used as 
   the proportional gain K_p and the integral gain K_i.

5. plot_error from plot.py
   This function plots the evolution of the error X_error.



The function main_program() contains the loop that loops through the reference trajectory 
generated by TrajectoryGenerator. The reference trajectory has 1907 reference
configurations corresponding to the 19 seconds from the 8 reference segments plus
boundary conditions (N = 19k/0.01 + 7, where k = 1).

For each iteration through the loop in main_program, the software:

I. Calculates the control law using FeedbackControl and WheelArmSpeeds then generates 
   the wheel and joint controls.

II. Sends the controls, configuration, and timestep to NextState to calculate the new 
    configuration.

III. Stores every configuration in steps.csv for animation in CoppeliaSIM

IV. Stores each X_err 6-vector in error.csv which is then plotted 
    showing the evolution of the error over time.


*A tolerance of 10e-5 was used when calculating the Jacobian pseudoinverse in order to
 achieve the desired results with the YouBot in CoppeliaSIM.


*No joint limits were implemented 

*No collision avoidance mechanism was implemented